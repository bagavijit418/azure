{
	"name": "DataLodPOC",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "avijitspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "46899814-6352-49b8-b3c6-7494d33e2cc9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_spark",
				"display_name": "Synapse Spark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9c39901f-b06a-4ae9-ac0b-9c816cb3b9ef/resourceGroups/Data_Engineer/providers/Microsoft.Synapse/workspaces/avijitsynapse/bigDataPools/avijitspark",
				"name": "avijitspark",
				"type": "Spark",
				"endpoint": "https://avijitsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/avijitspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"x=5 \r\n",
					"y=6\r\n",
					"z=5+6"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"account_name = \"bagavijit418dl\"\r\n",
					"container_name = \"data\"\r\n",
					"relative_path = \"raw\"\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\r\n",
					"\r\n",
					"spark.conf.set(\"fs.azure.account.auth.type.%s.dfs.core.windows.net\" %account_name, \"SharedKey\")\r\n",
					"spark.conf.set(\"fs.azure.account.key.%s.dfs.core.windows.net\" %account_name ,\"YArYNUGAfI1NzcYW+o1z7j9kxwUo11P7QY5hZ/tN6mloVuFeeY1DvnMKsfT2R8s2AAjrQk9kENAd904q7Jtc7A==\")\r\n",
					"\r\n",
					"df1 = spark.read.option('header', 'true') \\\r\n",
					"                .option('delimiter', ',') \\\r\n",
					"                .csv(adls_path + '/Log.csv')\r\n",
					"\r\n",
					"display(df1)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Lab - Spark Pool - JSON files\r\n",
					"\r\n",
					"%%spark\r\n",
					"\r\n",
					"val df = spark.read.format(\"json\").load(\"abfss://data@bagavijit418dl.dfs.core.windows.net/raw/customer/customer_arr.json\")\r\n",
					"display(df)\r\n",
					"\r\n",
					"// Now we need to expand the courses information\r\n",
					"\r\n",
					"%%spark\r\n",
					"import org.apache.spark.sql.functions._\r\n",
					"val df = spark.read.format(\"json\").load(\"abfss://data@bagavijit418dl.dfs.core.windows.net/raw/customer/customer_arr.json\")\r\n",
					"val newdf=df.select(col(\"customerid\"),col(\"customername\"),col(\"registered\"),explode(col(\"courses\")))\r\n",
					"display(newdf)\r\n",
					"\r\n",
					"// Reading the customer object file\r\n",
					"%%spark\r\n",
					"import org.apache.spark.sql.functions._\r\n",
					"val df = spark.read.format(\"json\").load(\"abfss://data@bagavijit418dl.dfs.core.windows.net/raw/customer/customer_obj.json\")\r\n",
					"val newdf=df.select(col(\"customerid\"),col(\"customername\"),col(\"registered\"),explode(col(\"courses\")),col(\"details.city\"),col(\"details.mobile\"))\r\n",
					"display(newdf)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			}
		]
	}
}